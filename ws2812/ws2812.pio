.program ws2812

.side_set 1

.define public T1 2
.define public T2 5
.define public T3 3

.wrap_target
loop:
    out x, 1        side 0 [T3 - 1] ; Base case is low (3 cycles)
    jmp !x on_zero     side 1 [T1 - 1] ; High to kick off the round (2 cycles)
                                    ; Jump to zero if the current bit is low
on_one:
    jmp loop        side 1 [T2 - 1] ; Keep the level as high (5 cycles)
on_zero:
    nop             side 0 [T2 - 1] ; Set to low (5 cycles)
.wrap

% c-sdk {
#include "hardware/clocks.h"

static inline void ws2812_program_init(PIO& pio, uint sm, uint offset, uint pin, 
                                       float freq, bool rgbw) {
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    pio_sm_config c = ws2812_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, pin);
    sm_config_set_out_shift(&c, 
        /* shift_right =*/ false, 
        /* autopull =*/ true,
        // pull_threshold 
        rgbw ? 32 : 24);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    int cycles_per_bit = ws2812_T1 + ws2812_T2 + ws2812_T3;
    float div = clock_get_hz(clk_sys) / (freq * cycles_per_bit);
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);         
}

%}